buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:5.0.0"
    }
}

plugins {
    id 'fabric-loom' version '0.5-SNAPSHOT'
}

apply plugin: "com.github.johnrengelman.shadow"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven {
        name = "CottonMC"
        url = "https://server.bbkr.space/artifactory/libs-release"
    }
    maven {
        name = "RedstoneParadox Mods"
        url = "https://dl.bintray.com/redstoneparadox/mods"
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
}

// Jar-In-Jar an API mod
def jijApi(dep) {
    dependencies.modApi(dep) {
        exclude group: 'net.fabricmc.fabric-api'
    }
    dependencies.include dep
}

def shadowCompile(dep) {
    dependencies.shadow(dep)
    dependencies.compile(dep)
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "io.github.prospector:modmenu:+"
    modRuntime "me.shedaniel:RoughlyEnoughItems:+"
    modRuntime "com.github.SuperCoder7979:databreaker:f072a81"

    jijApi "com.github.redstoneparadox:OakTree:e97d249"

    shadowCompile "blue.endless:jankson:1.1.0"
    shadowCompile "com.github.halotroop2288:cotton:abstraction-SNAPSHOT"
}

shadowJar {
    classifier("shadow")
    configurations = [project.configurations.shadow]
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier("sources")
    from sourceSets.main.allSource
}

jar {
    classifier("compile")
    from compileJava
    from processResources
    from "LICENSE"
    from "README.md"
}